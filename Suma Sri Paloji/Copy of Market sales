{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1qWoFc8Uvvst1gEUAAMqLcaCQNFovNOan","timestamp":1734356498354}],"authorship_tag":"ABX9TyMAmBIX2JuAYKy4P3+uxhpE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_XlVxiserAZk","executionInfo":{"status":"ok","timestamp":1734356007879,"user_tz":-330,"elapsed":1185,"user":{"displayName":"Suma Sri Paloji","userId":"02301091135906640651"}},"outputId":"3780a868-bac4-4f61-85f6-77e2daebcba6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Missing Values:\n"," customer id         0\n","Gender              0\n","Age                 0\n","product category    0\n","Quantity            0\n","Price per unit      0\n","Total amount        0\n","dtype: int64\n","Preprocessed Data:\n","  customer id  Gender  Age  product category  Quantity  Price per unit  \\\n","0     cust001       0   40                 1         3             150   \n","1     cust002       1   43                 0         2             100   \n","2     cust003       1   50                 2         2             100   \n","3     cust004       0   45                 2         1              50   \n","4     cust005       1   55                 0         3              50   \n","5     cust006       0   35                 1         3             100   \n","6     cust007       0   40                 2         2              50   \n","7     cust008       1   50                 0         1              50   \n","8     cust009       1   30                 0         3             100   \n","9     cust010       0   35                 2         2              50   \n","\n","   Total amount    Age Group  \n","0           450  Middle-aged  \n","1           200  Middle-aged  \n","2           200  Middle-aged  \n","3            50  Middle-aged  \n","4           150       Senior  \n","5           300        Young  \n","6           100  Middle-aged  \n","7            50  Middle-aged  \n","8           300        Young  \n","9           100        Young  \n","Data has been saved to 'cleaned_training_data.csv'.\n"]}],"source":["import pandas as pd\n","\n","# Step 1: Load the data\n","data = {\n","    \"customer id\": [\"cust001\", \"cust002\", \"cust003\", \"cust004\", \"cust005\", \"cust006\", \"cust007\", \"cust008\", \"cust009\", \"cust010\"],\n","    \"Gender\": [\"male\", \"female\", \"female\", \"male\", \"female\", \"male\", \"male\", \"female\", \"female\", \"male\"],\n","    \"Age\": [40, 43, 50, 45, 55, 35, 40, 50, 30, 35],\n","    \"product category\": [\"Electronics\", \"Beauty\", \"clothing\", \"clothing\", \"Beauty\", \"Electronics\", \"clothing\", \"Beauty\", \"Beauty\", \"clothing\"],\n","    \"Quantity\": [3, 2, 2, 1, 3, 3, 2, 1, 3, 2],\n","    \"Price per unit\": [150, 100, 100, 50, 50, 100, 50, 50, 100, 50],\n","    \"Total amount\": [450, 200, 200, 50, 150, 300, 100, 50, 300, 100]\n","}\n","\n","# Convert data to a pandas DataFrame\n","df = pd.DataFrame(data)\n","\n","# Step 2: Data Cleaning\n","# Check for missing values\n","print(\"Missing Values:\\n\", df.isnull().sum())\n","\n","# Verify Total amount = Quantity * Price per unit\n","df['Calculated Total'] = df['Quantity'] * df['Price per unit']\n","df['Total amount_correct'] = df['Total amount'] == df['Calculated Total']\n","\n","# Check for discrepancies\n","if not df['Total amount_correct'].all():\n","    print(\"Warning: Some Total Amount values are incorrect!\")\n","\n","# Drop unnecessary column after verification\n","df.drop(columns=['Calculated Total', 'Total amount_correct'], inplace=True)\n","\n","# Step 3: Feature Engineering\n","# Create Age Group Categories\n","def age_group(age):\n","    if age <= 35:\n","        return 'Young'\n","    elif 36 <= age <= 50:\n","        return 'Middle-aged'\n","    else:\n","        return 'Senior'\n","\n","df['Age Group'] = df['Age'].apply(age_group)\n","\n","# Step 4: Encode Categorical Features\n","# Convert Gender and Product Category to numerical values\n","df['Gender'] = df['Gender'].map({'male': 0, 'female': 1})\n","df['product category'] = df['product category'].astype('category').cat.codes\n","\n","# Step 5: Save Cleaned Data\n","output_file = \"cleaned_training_data.csv\"\n","df.to_csv(output_file, index=False)\n","\n","# Display final preprocessed DataFrame\n","print(\"Preprocessed Data:\")\n","print(df)\n","print(f\"Data has been saved to '{output_file}'.\")"]},{"cell_type":"markdown","source":["# New Section"],"metadata":{"id":"DhQpQ_zxs0ZK"}}]}